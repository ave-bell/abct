# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
temp <- df %>%
mutate(newcol = 0)
view(temp)
# name new column
temp <- `colnames<-`(temp,
c(colnames(temp)[-length(temp)], vector[[1]][i]))
# place indicator value into column
temp[length(temp)][row] = 1
}else{ # otherwise column exists
# place indicator in column
temp[col][row] = 1
}
}
# return the updated df
return(temp)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
view(df)
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# place indicator value into column
df[length(df)][row] = 1
}else{ # otherwise column exists
# place indicator in column
df[col][row] = 1
}
}
# return the updated df
return(df)
}
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
View(df)
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
View(df)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
print("DOES NOT EXIST")
# build column
df <- df %>%
mutate(newcol = 0)
view(df)
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# place indicator value into column
df[length(df)][row] = 1
}else{ # otherwise column exists
print("EXISTS")
# place indicator in column
df[col][row] = 1
}
}
# return the updated df
return(df)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
expand_row <- function(df, vector, row)
{
require(tidyverse)
print(length(vector[[1]]))
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
print("DOES NOT EXIST")
# build column
df <- df %>%
mutate(newcol = 0)
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# place indicator value into column
df[length(df)][row] = 1
}else{ # otherwise column exists
print("EXISTS")
# place indicator in column
df[col][row] = 1
}
}
# return the updated df
return(df)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
View(df)
expand_row <- function(df, vector, row)
{
require(tidyverse)
print(length(vector[[1]]))
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
print("DOES NOT EXIST")
# build column
df <- df %>%
mutate(newcol = 0)
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# place indicator value into column
df[length(df)][row] = 1
}
}
# return the updated df
return(df)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
View(df)
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
print("DOES NOT EXIST")
# build column
df <- df %>%
mutate(newcol = 0)
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# place indicator value into column
df[length(df)][row] = 1
df.1 <- df
view(df.1)
}
}
# return the updated df
return(df)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
#'all seperator characters are correctly located, and the data in the column is spelled correctly.
#' @param df dataframe
#' @param column name of the column for expansion
#' @param separator character that separates the data
#'
#' @return expanded dataframe
#' @export
#'
#' @examples column_expansion(df, 1, ",")
#'
column = 2
separator = "/"
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
#' expand row
#'
#' @param df dataframe
#' @param vector vector of values to build columns for
#' @param row row number of dataframe
#'
#' @return updated dataframe
#'
#' @examples expand_row(df, row_contents_vector, row_number)
vector <- contents
i in 1:length(vector[[1]])
1:length(vector[[1]])
find_existing_column <- function(df, colname){
# initialize index to default value
columnIndex = -999999
# create vector of column names in dataframe
colNameVector <- colnames(df)
if(any(colNameVector == colname)){
columnIndex = which(colNameVector == colname)
}
# return value as specified
return(columnIndex)
}
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
i = 1
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
col
col == -999999
# build column
df <- df %>%
mutate(newcol = 0)
View(df)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
}else{
df[col][row] = 1
}
}
# return the updated df
return(df)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
#'all seperator characters are correctly located, and the data in the column is spelled correctly.
#' @param df dataframe
#' @param column name of the column for expansion
#' @param separator character that separates the data
#'
#' @return expanded dataframe
#' @export
#'
#' @examples column_expansion(df, 1, ",")
#'
column = 2
separator = "/"
row = 1
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
find_existing_column <- function(df, colname){
# initialize index to default value
columnIndex = -999999
# create vector of column names in dataframe
colNameVector <- colnames(df)
if(any(colNameVector == colname)){
columnIndex = which(colNameVector == colname)
}
# return value as specified
return(columnIndex)
}
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
#' expand row
#'
#' @param df dataframe
#' @param vector vector of values to build columns for
#' @param row row number of dataframe
#'
#' @return updated dataframe
#'
#' @examples expand_row(df, row_contents_vector, row_number)
vector <- contents
i = 1
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
col == -999999
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
# loop across contents of vector
for (i in 2:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
}else{
df[col][row] = 1
}
}
View(df)
row = 2
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
View(contents)
#' expand row
#'
#' @param df dataframe
#' @param vector vector of values to build columns for
#' @param row row number of dataframe
#'
#' @return updated dataframe
#'
#' @examples expand_row(df, row_contents_vector, row_number)
vector <- contents
i = 1
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
col
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
}else{
df[col][row] = 1
}
View(df)
df[row][col] = 1
df[col][row] = 1
df[1][2]
View(df)
df[1]
df[1][1]
df[1][[1]]
df[1][[[1]]]
df[[1]][1]
df[[1]][2]
df[[2]][2]
df[[col]][row] = 1
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 2:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
}else{
df[[col]][row] = 1
}
}
# return the updated df
return(df)
}
find_existing_column <- function(df, colname){
# initialize index to default value
columnIndex = -999999
# create vector of column names in dataframe
colNameVector <- colnames(df)
if(any(colNameVector == colname)){
columnIndex = which(colNameVector == colname)
}
# return value as specified
return(columnIndex)
}
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
expand_row <- function(df, vector, row)
{
require(tidyverse)
# loop across contents of vector
for (i in 1:length(vector[[1]])){
# determine index of existing column
col = find_existing_column(df, vector[[1]][i])
# check to see if column for current element DOES NOT exists
if(col == -999999){
# build column
df <- df %>%
mutate(newcol = 0)
# place indicator in column
df$newcol[row] = 1
# name new column
df <- `colnames<-`(df,
c(colnames(df)[-length(df)], vector[[1]][i]))
}else{
df[[col]][row] = 1
}
}
# return the updated df
return(df)
}
# loop across rows
for (row in 1:nrow(df)){
#row = 2
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
# end of loop across row
}
column = 2
separator = "/"
# loop across rows
for (row in 1:nrow(df)){
#row = 2
# split contents of current row
# function: strsplit
contents <- strsplit(df[[column]][row], separator)
df <- expand_row(df, contents, row)
# end of loop across row
}
View(df)
library(abct)
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e")
)
testdfoutput <- abct::column_expansion(df, 2, '/')
View(testdfoutput)
df <- data.frame(
name = "this",
col = c("a/b/c/e", "a/c/e", "f")
)
testdfoutput <- abct::column_expansion(df, 2, '/')
View(testdfoutput)
